service: aws-node-express-dynamodb-api

# Definição como variável de ambiente no nome da tabela no banco de dados
custom:
  tableName: 'users-table-${sls:stage}'

provider:
  name: aws
  runtime: nodejs14.x
  #Configuações da Api gateway na AWS
  apiGateway:
    # Configuração dos planos de uso da aplicação
    # Chaves criadas, no caso pode ser os clientes
    apiKeys:
      - free:
        - freeTierKey
      - paid:
        - paidTier1
        - paidTier2
    usagePlan:
      - free:
          quota:
            limit: 5
            offset: 2
            period: MONTH
          throttle:
            burstLimit: 200
            rateLimit: 100
      - paid: 
          quota:
            limit: 50
            offset: 20
            period: MONTH
          throttle:
            burstLimit: 200
            rateLimit: 100
  # Configuração das permissões de acesso para Lambda acessar o banco de dados
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  # Foi configurado todos endpoints para que sejam gerados logs separados dentro do CloudWatch
  post_user:
    handler: handler.handler
    # Configuração para que a Lambda responda a eventos do tipo HTTP
    # Endpoint para cadastro do usuário
    events:
      - http:
          path: users 
          method: post
          private: true
  # Configuração da função para obter informações do usuário
  get_user_by_id:
    handler: handler.handler
    events:
      - http:
          path: users/{userId}
          method: get
          private: true
          request:
            parameters:
              paths:
                userId: true
# Configuração da tabela do banco de dados utilizado
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        # Configuração das capacidade de leitura e escrita do banco 
        # (Diferente dos outros bancos, o custo é calculado por Leitura e escrita e não pela configuração do cluster)
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # Obtem o nome da tabela definida como variável
        TableName: ${self:custom.tableName}
